---
# to unlock a blocked user run
#/sbin/pam_tally2 -u <username> --reset
- block:
  - name: configure lockout for failed password attempts, unlock after 900 seconds Debian
    lineinfile:
      path: "/etc/pam.d/common-auth"
      regexp: 'pam_tally2.so'
      line: 'auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900'
    register: change_state
    become: yes
    when: ansible_os_family=='Debian'


  - name: configure lockout for failed password attempts, unlock after 900 seconds on /etc/pam.d/password-auth RedHat
    lineinfile:
      path: "/etc/pam.d/password-auth"
      regexp: "{{item.regex}}"
      line: "{{item.line}}"
    with_items:
      - { regex: 'auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900', line: 'auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900'}
      - { regex: 'auth \[success=1 default=bad\] pam_unix.so',                                  line: 'auth [success=1 default=bad] pam_unix.so'}
      - { regex: 'auth \[default=die\] pam_faillock.so authfail audit deny=5 unlock_time=900',  line: 'auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900'}
      - { regex: 'auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900',     line: 'auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900'}
    register: change_state
    become: yes
    when: ansible_os_family=='RedHat'


  - name: configure lockout for failed password attempts, unlock after 900 seconds on /etc/pam.d/system-auth RedHat
    lineinfile:
      path: "/etc/pam.d/system-auth"
      regexp: "{{ item.regex }}"
      line: "{{ item.line }}"
    with_items:
      - { regex: 'auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900', line: 'auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900'}
      - { regex: 'auth \[success=1 default=bad\] pam_unix.so',                                  line: 'auth [success=1 default=bad] pam_unix.so'}
      - { regex: 'auth \[default=die\] pam_faillock.so authfail audit deny=5 unlock_time=900',  line: 'auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900'}
      - { regex: 'auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900',     line: 'auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900'}
    register: change_state
    become: yes
    when: ansible_os_family=='RedHat'

  #done 
  - set_fact:
      done_patch: "{{done_patch}} + ['|5.3.2| Ensure lockout for failed password attempts is configured']" 
    when: change_state.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|5.3.2| Ensure lockout for failed password attempts is configured']" 
    when: not change_state.changed

  when: pam.lockout_failed_attempts

#not done
- set_fact:
    not_done: "{{not_done}} + ['|5.3.2| Ensure lockout for failed password attempts is configured']"
  when: not pam.lockout_failed_attempts