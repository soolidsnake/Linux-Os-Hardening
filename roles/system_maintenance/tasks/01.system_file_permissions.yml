---
# add 6.1.1 Audit system file permissions (Not Scored)
- block:
  - name: Ensure permissions on /etc/passwd are configured 
    register: change_state
    file: path="/etc/passwd" owner=root group=root mode=644

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.2| Ensure permissions on /etc/passwd are configured']" 
    when: change_state.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.2| Ensure permissions on /etc/passwd are configured']" 
    when: not change_state.changed


  - name: Ensure permissions on /etc/shadow are configured 
    register: change_state_debian
    file: path="/etc/shadow" owner=root group=shadow mode=640
    when: ansible_os_family=='Debian'


  - name: Ensure permissions on /etc/shadow are configured 
    register: change_state_redhat
    file: path="/etc/shadow" owner=root group=root mode=640
    when: ansible_os_family=='RedHat'


  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.3| Ensure permissions on /etc/shadow are configured']" 
    when: change_state_debian.changed or change_state_redhat.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.3| Ensure permissions on /etc/shadow are configured']" 
    when: not change_state_debian.changed or not change_state_redhat.changed



  - name: Ensure permissions on /etc/group are configured
    register: change_state
    file: path="/etc/group" owner=root group=root mode=644


  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.4| Ensure permissions on /etc/group are configured']" 
    when: change_state.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.4| Ensure permissions on /etc/group are configured']" 
    when: not change_state.changed


  - name: Ensure permissions on /etc/gshadow are configured
    register: change_state_debian
    file: path="/etc/gshadow" owner=root group=shadow mode=640
    when: ansible_os_family=='Debian'


  - name: Ensure permissions on /etc/gshadow are configured
    register: change_state_redhat
    file: path="/etc/gshadow" owner=root group=root mode=640
    when: ansible_os_family=='RedHat'


  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.5| Ensure permissions on /etc/gshadow are configured']" 
    when: change_state_debian.changed or change_state_redhat.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.5| Ensure permissions on /etc/gshadow are configured']" 
    when: not change_state_debian.changed or not change_state_redhat.changed



  - name: Ensure permissions on /etc/passwd- are configured 
    register: change_state
    file: path="/etc/passwd-" owner=root group=root mode=600

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.6| Ensure permissions on /etc/passwd- are configured']" 
    when: change_state.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.6| Ensure permissions on /etc/passwd- are configured']" 
    when: not change_state.changed


  - name: Ensure permissions on /etc/shadow- are configured 
    register: change_state
    file: path="/etc/shadow-" owner=root group=shadow mode=600
    when: ansible_os_family=='Debian'

  - name: Ensure permissions on /etc/shadow- are configured 
    register: change_state
    file: path="/etc/shadow-" owner=root group=root mode=600
    when: ansible_os_family=='RedHat'


  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.7| Ensure permissions on /etc/shadow- are configured']" 
    when: change_state_debian.changed or change_state_redhat.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.7| Ensure permissions on /etc/shadow- are configured']" 
    when: not change_state_debian.changed or not change_state_redhat.changed



  - name: Ensure permissions on /etc/group- are configured
    register: change_state
    file: path="/etc/group-" owner=root group=root mode=600

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.8| Ensure permissions on /etc/group- are configured']" 
    when: change_state.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.8| Ensure permissions on /etc/group- are configured']" 
    when: not change_state.changed


  - name: Ensure permissions on /etc/gshadow- are configured 
    register: change_state
    file: path="/etc/gshadow-" owner=root group=shadow mode=600
    when: ansible_os_family=='Debian'

  - name: Ensure permissions on /etc/gshadow- are configured 
    register: change_state
    file: path="/etc/gshadow-" owner=root group=root mode=600
    when: ansible_os_family=='RedHat'


  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|6.1.7| Ensure permissions on /etc/gshadow- are configured']" 
    when: change_state_debian.changed or change_state_redhat.changed

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|6.1.7| Ensure permissions on /etc/gshadow- are configured']" 
    when: not change_state_debian.changed or not change_state_redhat.changed


  become: yes

# add the other partitions

- local_action: file path="{{log_path}}" state=directory


- block :
  - name: Ensure no world writable files exist
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002
    register: find_output

  - debug: msg="Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_word_writable_files.log
                and ensure that no world writable files exist"
  become: yes
                
- local_action: copy content={{find_output.stdout}} dest={{log_path}}/{{ansible_date_time.date}}_word_writable_files.log
  


- block :
  - name: Ensure no unowned files or directories exist
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser
    register: find_output

  - debug: msg="Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_unowned_files_directories.log
                and ensure that no unowned files or directories exist"
  become: yes              

- local_action: copy content={{find_output.stdout}} dest={{log_path}}/{{ansible_date_time.date}}_unowned_files_directories.log
  


- block :
  - name: Ensure no ungrouped files or directories exist
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup
    register: find_output

  - debug: msg="Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_ungrouped_files_directories.log
                and ensure that no ungrouped files or directories exist"
  become: yes

- local_action: copy content={{find_output.stdout}} dest={{log_path}}/{{ansible_date_time.date}}_ungrouped_files_directories.log
  

- set_fact:
    manual_patch: "{{manual_patch}} +  ['|6.1.12| Audit SUID executables: Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_ungrouped_files_directories.log
                and ensure that no ungrouped files or directories exist']" 


- block :
  - name: Audit SUID executables
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -4000
    register: find_output

  - debug: msg="Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_suid_executables.log
                and ensure to keep the minimum SUID executables"
  become: yes

- local_action: copy content={{find_output.stdout}} dest={{log_path}}/{{ansible_date_time.date}}_suid_executables.log
  
- set_fact:
    manual_patch: "{{manual_patch}} +  ['|6.1.13| Audit SUID executables: Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_suid_executables.log
                and ensure to keep the minimum SUID executables']" 


- block :
  - name: Audit SGID executables
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -2000
    register: find_output

  - debug: msg="Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_sgid_executables.log
                and ensure to keep the minimum SGID executables"
  become: yes

- local_action: copy content={{find_output.stdout}} dest={{log_path}}/{{ansible_date_time.date}}_sgid_executables.log

- set_fact:
    manual_patch: "{{manual_patch}} +  ['|6.1.14| Audit SGID executables: Please check {{log_path}}/system_maintenance/{{ansible_date_time.date}}_sgid_executables.log
                and ensure to keep the minimum SGID executables']" 
