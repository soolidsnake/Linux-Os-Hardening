---

- block:
  - name: Ensure X Window System is not installedp RedHat
    failed_when: false
    register: change_state
    yum:
      name: xorg-x11*
      state: absent   
    when: ansible_os_family=='RedHat' and services.disable_x_windows



  - name: Ensure X Window System is not installedp Debian
    failed_when: false
    register: change_state
    apt:
      name: xserver-xorg*
      state: absent
    when: ansible_os_family=='Debian' and services.disable_x_windows

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.2| Ensure X Window System is not installed']" 
    when: change_state.changed and services.disable_x_windows

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.2| Ensure X Window System is not installed']"  
    when: not change_state.changed and services.disable_x_windows

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.2| Ensure X Window System is not installed']" 
    when: not services.disable_x_windows



  - name: Ensure Avahi Server is not enabled
    failed_when: false
    shell: systemctl is-enabled avahi-daemon
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable avahi Server
    failed_when: false
    register: change_state
    shell: "systemctl disable avahi-daemon"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_avahi_server


  - debug: msg="{{change_state}}" 

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.3| Ensure Avahi Server is not enabled']" 
    when: change_state.changed and services.disable_avahi_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.3| Ensure Avahi Server is not enabled']"   
    when: not change_state.changed and services.disable_avahi_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.3| Ensure Avahi Server is not enabled']" 
    when: not services.disable_avahi_server


  - name: Ensure CUPS is not enabled
    failed_when: false
    shell: systemctl is-enabled cups
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - debug: msg={{systemctl_output}}

  - name: Disable CUPS
    failed_when: false
    register: change_state
    shell: "systemctl disable cups"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_cups

  - debug: msg={{change_state}}


  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.4| Ensure CUPS is not enabled']" 
    when: change_state.changed and services.disable_cups

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.4| Ensure CUPS is not enabled']"   
    when: not change_state.changed and services.disable_cups

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.4| Ensure CUPS is not enabled']" 
    when: not services.disable_cups


  - name: Ensure DHCP Server is not enabled
    failed_when: false
    shell: systemctl is-enabled dhcpd
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable DHCP Server
    failed_when: false
    register: change_state
    shell: "systemctl disable dhcpd"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_dhcp_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.5| Ensure DHCP Server is not enabled']" 
    when: change_state.changed and services.disable_cups

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.5| Ensure DHCP Server is not enabled']"  
    when: not change_state.changed and services.disable_cups

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.5| Ensure DHCP Server is not enabled']" 
    when: not services.disable_cups


  - name: Ensure LDAP Server is not enabled
    failed_when: false
    shell: systemctl is-enabled slapd
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable LDAP Server
    failed_when: false
    register: change_state
    shell: "systemctl disable slapd"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_ldap_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.6| Ensure LDAP Server is not enabled']" 
    when: change_state.changed and services.disable_ldap_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.6| Ensure LDAP Server is not enabled']" 
    when: not change_state.changed and services.disable_ldap_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.6| Ensure LDAP Server is not enabled']" 
    when: not services.disable_ldap_server


  - name: Ensure NFS is not enabled
    failed_when: false
    shell: systemctl is-enabled nfs
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable NFS Server
    failed_when: false
    register: change_state
    shell: "systemctl disable nfs"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_nfs

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.7.1| Ensure NFS is not enabled']" 
    when: change_state.changed and services.disable_nfs

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.7.1| Ensure NFS is not enabled']"  
    when: not change_state.changed and services.disable_nfs

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.7.1| Ensure NFS is not enabled']" 
    when: not services.disable_nfs


  - name: Ensure NFS Server is not enabled
    failed_when: false
    shell: systemctl is-enabled nfs-server
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable NFS Server
    failed_when: false
    register: change_state
    shell: "systemctl disable nfs-server"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_nfs_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.7.2| Ensure NFS Server is not enabled']" 
    when: change_state.changed and services.disable_nfs_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.7.2| Ensure NFS Server is not enabled']"  
    when: not change_state.changed and services.disable_nfs_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.7.2| Ensure NFS Server is not enabled']" 
    when: not services.disable_nfs_server


  - name: Ensure RPC is not enabled
    failed_when: false
    shell: systemctl is-enabled rpcbind
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable RPC Server
    failed_when: false
    register: change_state
    shell: "systemctl disable nfs-rpcbind"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_rpc

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.7.3| Ensure RPC is not enabled']" 
    when: change_state.changed and services.disable_rpc

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.7.3| Ensure RPC is not enabled']" 
    when: not change_state.changed and services.disable_rpc

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.7.3| Ensure RPC is not enabled']" 
    when: not services.disable_rpc


  - name: Ensure DNS server is not enabled
    failed_when: false
    shell: systemctl is-enabled named
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable DNS Server
    failed_when: false
    register: change_state
    shell: "systemctl disable named"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_dns_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.8| Ensure DNS server is not enabled']" 
    when: change_state.changed and services.disable_dns_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.8| Ensure DNS server is not enabled']" 
    when: not change_state.changed and services.disable_dns_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.8| Ensure DNS server is not enabled']" 
    when: not services.disable_dns_server


  - name: Ensure FTP server is not enabled
    failed_when: false
    shell: systemctl is-enabled vsftpd
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable FTP Server
    failed_when: false
    register: change_state
    shell: "systemctl disable vsftpd"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_ftp_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.9| Ensure FTP server is not enabled']" 
    when: change_state.changed and services.disable_ftp_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.9| Ensure FTP server is not enabled']" 
    when: not change_state.changed and services.disable_ftp_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.9| Ensure FTP server is not enabled']" 
    when: not services.disable_ftp_server


  - name: Ensure HTTP is not enabled
    failed_when: false
    shell: systemctl is-enabled httpd
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - debug: msg="{{systemctl_output}}"

  - name: Disable HTTP Server
    failed_when: false
    register: change_state
    shell: "systemctl disable httpd"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_http_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.10| Ensure HTTP is not enabled']" 
    when: change_state.changed and services.disable_http_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.10| Ensure HTTP is not enabled']"  
    when: not change_state.changed and services.disable_http_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.10| Ensure HTTP is not enabled']" 
    when: not services.disable_http_server


  - name: Ensure IMAP and POP3 is not enabled
    failed_when: false
    shell: systemctl is-enabled dovecot
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable IMAP and POP3 Server
    failed_when: false
    register: change_state
    shell: "systemctl disable dovecot"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_imap_pop3

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.11| Ensure IMAP and POP3 is not enabled']" 
    when: change_state.changed and services.disable_imap_pop3

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.11| Ensure IMAP and POP3 is not enabled']" 
    when: not change_state.changed and services.disable_imap_pop3

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.11| Ensure IMAP and POP3 is not enabled']" 
    when: not services.disable_imap_pop3


  - name: Ensure HTTP Proxy is not enabled
    failed_when: false
    shell: systemctl is-enabled squid 
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable HTTP Proxy Server
    failed_when: false
    register: change_state
    shell: "systemctl disable squid"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_http_proxy_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.12| Ensure HTTP Proxy is not enabled']" 
    when: change_state.changed and services.disable_http_proxy_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.12| Ensure HTTP Proxy is not enabled']" 
    when: not change_state.changed and services.disable_http_proxy_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.12| Ensure HTTP Proxy is not enabled']" 
    when: not services.disable_http_proxy_server


  - name: Ensure SNMP is not enabled
    failed_when: false
    shell: systemctl is-enabled snmpd
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable SNMP Server
    failed_when: false
    register: change_state
    shell: "systemctl disable snmpd"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_snmp

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.13| Ensure SNMP is not enabled']" 
    when: change_state.changed and services.disable_snmp

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.13| Ensure SNMP is not enabled']" 
    when: not change_state.changed and services.disable_snmp

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.13| Ensure SNMP is not enabled']" 
    when: not services.disable_snmp


  - name: Ensure NIS is not enabled
    failed_when: false
    shell: systemctl is-enabled ypserv
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable NIS Server
    failed_when: false
    register: change_state
    shell: "systemctl disable ypserv"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_nis

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.14|  Ensure NIS is not enabled']" 
    when: change_state.changed and services.disable_nis

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.14|  Ensure NIS is not enabled']"
    when: not change_state.changed and services.disable_nis

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.14|  Ensure NIS is not enabled']"
    when: not services.disable_nis


  - name: Ensure Samba Server is not enabled
    failed_when: false
    shell: systemctl is-enabled smb
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable Samba Server
    failed_when: false
    register: change_state
    shell: "systemctl disable smb"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_samba_server
    
  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.15|  Ensure Samba is not enabled']" 
    when: change_state.changed and services.disable_samba_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.15|  Ensure Samba is not enabled']"
    when: not change_state.changed and services.disable_samba_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.15|  Ensure Samba is not enabled']"
    when: not services.disable_samba_server


  - name: Ensure talk Server is not enabled
    failed_when: false
    shell: systemctl is-enabled ntalk
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable talk Server
    failed_when: false
    register: change_state
    shell: "systemctl disable ntalk"
    when: not systemctl_output.failed and systemctl_output.stdout != "disabled" and services.disable_talk_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.16|  Ensure talk Server is not enabled']" 
    when: change_state.changed and services.disable_samba_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.16|  Ensure talk Server is not enabled']" 
    when: not change_state.changed and services.disable_samba_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.16|  Ensure talk Server is not enabled']" 
    when: not services.disable_samba_server


  - name: Ensure TELNET Server is not enabled
    failed_when: false
    shell: systemctl is-enabled telnet.socket
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable TELNET Server
    failed_when: false
    register: change_state
    shell: "systemctl disable telnet.socket"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_telnet_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.17|  Ensure TELNET Server is not enabled']" 
    when: change_state.changed and services.disable_telnet_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.17|  Ensure TELNET Server is not enabled']" 
    when: not change_state.changed and services.disable_telnet_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.17|  Ensure TELNET Server is not enabled']"  
    when: not services.disable_telnet_server


  - name: Ensure TFTP Server is not enabled
    failed_when: false
    shell: systemctl is-enabled tftp.socket
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable TFTP Server
    failed_when: false
    register: change_state
    shell: "systemctl disable tftp.socket"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_tftp_server

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.18|  Ensure TFTP Server is not enabled']" 
    when: change_state.changed and services.disable_tftp_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.18|  Ensure TFTP Server is not enabled']" 
    when: not change_state.changed and services.disable_tftp_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.18|  Ensure TFTP Server is not enabled']"  
    when: not services.disable_tftp_server


  - name: Ensure rsync service is not enabled
    failed_when: false
    shell: systemctl is-enabled rsyncd
    register: systemctl_output
    check_mode: no
    ignore_errors: yes
    changed_when: no

  - name: Disable rsync service Server
    failed_when: false
    register: change_state
    shell: "systemctl disable rsyncd"
    when: systemctl_output.rc == 0 and systemctl_output.stdout != "disabled" and services.disable_rsync

  #done
  - set_fact:
      done_patch: "{{done_patch}} + ['|2.2.19| Ensure rsync service is not enabled']" 
    when: change_state.changed and services.disable_tftp_server

  #already done
  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|2.2.19| Ensure rsync service is not enabled']" 
    when: not change_state.changed and services.disable_tftp_server

  #not done
  - set_fact:
      not_done: "{{not_done}} + ['|2.2.19| Ensure rsync service is not enabled']" 
    when: not services.disable_tftp_server

