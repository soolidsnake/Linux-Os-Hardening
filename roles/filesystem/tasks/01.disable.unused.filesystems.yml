---

# 1.1.1.1 =============================================================================================================

- name: Detect if cramfs is built-in
  shell: "grep /cramfs.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module cramfs
    template: src=CIS.cramfs.conf.j2 dest=/etc/modprobe.d/CIS.cramfs.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module cramfs
    modprobe: name=cramfs state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.1| Ensure mounting of cramfs filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.1| Ensure mounting of cramfs filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_cramfs_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.1| Ensure mounting of cramfs filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_cramfs_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.1| Ensure mounting of cramfs filesystems are disabled']"
  when: not filesystem.disable_cramfs_filesystem


# 1.1.1.2 =============================================================================================================

- name: Detect if freevxfs is built-in
  shell: "grep /freevxfs.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module freevxfs
    template: src=CIS.freevxfs.conf.j2 dest=/etc/modprobe.d/CIS.freevxfs.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module freevxfs
    modprobe: name=freevxfs state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.2| Ensure mounting of freevxfs filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.2| Ensure mounting of freevxfs filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_freevxfs_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.2| Ensure mounting of freevxfs filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_freevxfs_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.2| Ensure mounting of freevxfs filesystems are disabled']"
  when: not filesystem.disable_freevxfs_filesystem


# 1.1.1.3 =============================================================================================================

- name: Detect if jffs2 is built-in
  shell: "grep /jffs2.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module jffs2
    template: src=CIS.jffs2.conf.j2 dest=/etc/modprobe.d/CIS.jffs2.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module jffs2
    modprobe: name=jffs2 state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.3| Ensure mounting of jffs2 filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.3| Ensure mounting of jffs2 filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_jffs2_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.3| Ensure mounting of jffs2 filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_jffs2_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.3| Ensure mounting of jffs2 filesystems are disabled']"
  when: not filesystem.disable_jffs2_filesystem


# 1.1.1.4 =============================================================================================================

- name: Detect if hfs is built-in
  shell: "grep /hfs.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module hfs
    template: src=CIS.hfs.conf.j2 dest=/etc/modprobe.d/CIS.hfs.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module hfs
    modprobe: name=hfs state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.4| Ensure mounting of hfs filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.4| Ensure mounting of hfs filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_hfs_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.4| Ensure mounting of hfs filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_hfs_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.4| Ensure mounting of hfs filesystems are disabled']"
  when: not filesystem.disable_hfs_filesystem


# 1.1.1.5 =============================================================================================================

- name: Detect if hfsplus is built-in
  shell: "grep /hfsplus.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module hfsplus
    template: src=CIS.hfsplus.conf.j2 dest=/etc/modprobe.d/CIS.hfsplus.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module hfsplus
    modprobe: name=hfsplus state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.5| Ensure mounting of hfsplus filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.5| Ensure mounting of hfsplus filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_hfsplus_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.5| Ensure mounting of hfsplus filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_hfsplus_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.5| Ensure mounting of hfsplus filesystems are disabled']"
  when: not filesystem.disable_hfsplus_filesystem


# 1.1.1.6 =============================================================================================================
  
- name: Detect if squashfs is built-in
  shell: "grep /squashfs.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module squashfs
    template: src=CIS.squashfs.conf.j2 dest=/etc/modprobe.d/CIS.squashfs.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module squashfs
    modprobe: name=squashfs state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.6| Ensure mounting of squashfs filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.6| Ensure mounting of squashfs filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_squashfs_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.6| Ensure mounting of squashfs filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_squashfs_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.6| Ensure mounting of squashfs filesystems are disabled']"
  when: not filesystem.disable_squashfs_filesystem


# 1.1.1.7 =============================================================================================================

- name: Detect if udf is built-in
  shell: "grep /udf.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module udf
    template: src=CIS.udf.conf.j2 dest=/etc/modprobe.d/CIS.udf.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module udf
    modprobe: name=udf state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.7| Ensure mounting of udf filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.7| Ensure mounting of udf filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_udf_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.7| Ensure mounting of udf filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_udf_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.7| Ensure mounting of udf filesystems are disabled']"
  when: not filesystem.disable_udf_filesystem


# 1.1.1.8 =============================================================================================================

- name: Detect if vfat is built-in
  shell: "grep /vfat.ko /lib/modules/$(uname -r)/modules.builtin"
  register: grep_result
  changed_when: false
  failed_when: grep_result.rc == 2

- block:
  - name: Disable the module vfat
    template: src=CIS.vfat.conf.j2 dest=/etc/modprobe.d/CIS.vfat.conf mode=0644 owner=root
    register: disable_result
    tags: [print_action]

  - name: Disable the module vfat
    modprobe: name=vfat state=absent
    
  - set_fact:
      done_patch: "{{done_patch}} + ['|1.1.1.8| Ensure mounting of vfat filesystems is disabled']" 
    when: disable_result.changed

  - set_fact:
      already_done_patch: "{{already_done_patch}} + ['|1.1.1.8| Ensure mounting of vfat filesystems is disabled']" 
    when: not disable_result.changed


  become: yes
  when: filesystem.disable_vfat_filesystem and grep_result.rc == 1


- set_fact:
    manual_patch: "{{manual_patch}} + ['|1.1.1.8| Ensure mounting of vfat filestyems are disabled : This module is built-in, and need to recompile kernel to remove it']" 
  when: filesystem.disable_vfat_filesystem and grep_result.rc == 0

- set_fact:
    not_done: "{{not_done}} + ['|1.1.1.8| Ensure mounting of vfat filesystems are disabled']"
  when: not filesystem.disable_vfat_filesystem

